name: test install

on:
  push:
    paths-ignore:
      - '.gitignore'
      - '*.md'
      - 'LICENSE'
  pull_request:
    paths-ignore:
      - '.gitignore'
      - '*.md'
      - 'LICENSE'
  release:
    types:
      - created

jobs:
  test:
    name: test ${{ matrix.os }}, python ${{ matrix.python_version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macOS-latest, windows-latest]
        python_version: ['3.6', '3.9', '3.10']

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python_version }}

      - name: install carp and prove
        uses: perl-actions/install-with-cpm@stable
        with:
          install: |
            Carp::Assert
            Test::Harness

      - name: info - python version
        run: |
          python3 --version

      - name: info - perl version
        run: |
          perl --version

      - name: info - make version
        run: |
          make --version

      - name: info - prove version
        run: |
          prove --version

      - name: check prove works
        run: |
          prove -l t/03*

      - name: test install from github branch zip works
        # on windows: just doesn't seem to work, give up
        # pip gives errors like:
        #   ERROR: Could not install packages due to an OSError:
        #   [Errno 2] No such file or directory:
        #   'C:\\tmp\\pytwine-zip-install-tmp-fELxgiIQvz\\pytwine.zip'
        if: ${{ ! startsWith(matrix.os, 'windows') }}
        shell: bash
        run: |
          branch="${{ github.head_ref || github.ref_name }}"
          # "
          make VERBOSE=1 clean-env clean venv-init
          PERSONAL_TOKEN="${{ secrets.PERSONAL_TOKEN }}" perl ./test_zip_install.pl "${branch}"

      - name: run pytest tests
        run: |
          make VERBOSE=1 clean-env clean
          make VERBOSE=1 test-python

      - name: archive test reports
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: test-coverage
          path: |
            ./htmlcov
            ./pytest_report.html

      - name: run perl tests
        if: always()
        run: |
          make VERBOSE=1 clean-env clean
          make VERBOSE=1 test-perl

      - name: build py docs
        if: always()
        run: |
          make VERBOSE=1 clean-env clean
          make VERBOSE=1 docs

      - name: archive docs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: docs
          path: ./docs/build



